<div class="row">
	<div class="col-md-10">
		<h1>Gene Expression for <em><%= link_to params[:gene], "http://www.ncbi.nlm.nih.gov/gene/?term=#{params[:gene]}[sym]", 'data-toggle' => 'tooltip', title: "Search Entrez for '#{params[:gene]}'", 'data-placement' => 'right' %></em> across <%= params[:cluster] ? "cluster: #{params[:cluster]}" : 'all major cell types' %></h1>
	</div>
	<div class="col-md-2">
		<%= render partial: 'back_link' %>
	</div>
</div>
<div class="panel panel-default">
	<div class="panel-heading">
		<div class="panel-title">
			<h4><%= link_to "Box Plots <span class='fa fa-chevron-down'></span>".html_safe, '#box-controls', 'data-toggle' => 'collapse'  %></h4>
		</div>
	</div>
	<div id="box-controls" class="panel-collapse collapse in">
		<div class="panel-body">
			<%= render partial: 'cluster_nav' %>
			<%= render partial: 'boxpoints_picker' %>
			<%= render partial: 'gene_search_form' %>
			<div class="row">
				<div class="col-md-12">
					<div id="box-plot"></div>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="panel panel-default">
	<div class="panel-heading">
		<div class="panel-title">
			<h4><%= link_to "Expression Scatter Plot <span class='fa fa-chevron-down'></span>".html_safe, '#scatter-controls', 'data-toggle' => 'collapse'  %></h4>
		</div>
	</div>
	<div id="scatter-controls" class="panel-collapse collapse in">
		<div class="panel-body">
			<%= render partial: 'colorscale_picker' %>
			<div class="row">
				<div class="col-md-8">
					<div id="scatter-plot"></div>
				</div>
				<div class="col-md-4">
					<div id="reference-plot"></div>
				</div>
			</div>
		</div>
	</div>
</div>

<%= javascript_tag do %>

	// load box plot data
	<% @values.sort_by {|k,v| k}.each_with_index do |(cluster, data), index| %>
		var <%= cluster %>_exp = {
			y: <%= raw data[:y] %>,
			name: "<%= data[:name] %>",
			<% if params[:boxpoints].blank? %>
				boxpoints: false,
			<% else %>
				boxpoints: "<%= params[:boxpoints] %>",
			<% end %>
			boxmean: true,
			type: 'box',
			marker: {color: plotlyDefaultColors[<%= index %>]}
		};
	<% end %>

	var expressionData = [];
	<% @clusters.each do |cluster| %>
		expressionData.push(<%= cluster.name %>_exp);
	<% end %>

	<%= render partial: 'expression_box_layout' %>

	Plotly.newPlot('box-plot', expressionData, expressionLayout);

	// load expression scatter plot
	<% @expression.sort_by {|k,v| k}.each do |cluster, data| %>
		var <%= cluster %> = {
			x: <%= raw data[:x] %>,
			y: <%= raw data[:y] %>,
			text: <%= raw data[:text] %>,
			name: "<%= data[:name] %>",
			mode: 'markers',
			type: 'scatter',
			hoverinfo: 'text',
			marker: <%= raw data[:marker].to_json %>
		};
	<% end %>

	var clusterData = [all];

	<%= render partial: 'expression_scatter_layout' %>

	Plotly.newPlot('scatter-plot', clusterData, scatterLayout);

	// listener to redraw expression scatter with new color profile
	$("#colorscale").change(function() {

		var theme = $(this).val();
		all.marker.colorscale = theme;
		console.log("setting colorscale to " + theme);
		var clusterData = [all];

		Plotly.newPlot('scatter-plot', clusterData, scatterLayout);
	});

	// load static cluster scatter for reference
	<% @coordinates.sort_by {|k,v| k}.each_with_index do |(cluster, data), index| %>
		var <%= cluster %>_clst = {
			x: <%= raw data[:x] %>,
			y: <%= raw data[:y] %>,
			text: <%= raw data[:text] %>,
			name: "<%= data[:name] %>",
			mode: 'markers',
			type: 'scatter',
			marker: {color: plotlyDefaultColors[<%= index %>]}
		};
	<% end %>

	var data = [];
	<% @clusters.each do |cluster| %>
		data.push(<%= cluster.name %>_clst);
	<% end %>

	<%= render partial: 'static_scatter_layout' %>

	Plotly.newPlot('reference-plot', data, staticLayout, {staticPlot: true});

	// re-render expression plots on window resize to use available area
	$( window ).on('resizeEnd', function() {

		<%= render partial: 'expression_box_layout' %>

		<%= render partial: 'expression_scatter_layout' %>

		<%= render partial: 'static_scatter_layout' %>

		Plotly.newPlot('box-plot', expressionData, expressionLayout);
		Plotly.newPlot('scatter-plot', clusterData, scatterLayout);
		Plotly.newPlot('reference-plot', data, staticLayout, {staticPlot: true});
	});

<% end %>