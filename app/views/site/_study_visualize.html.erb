<div class="row">
  <div class="col-md-3" id="search-target">
    <%= render partial: 'search_options' %>
  </div>
  <div class="col-md-9" id="render-target">
    <%= render partial: 'view_options' %>
    <div class="panel panel-default">
      <div class="panel-heading">
        <div class="panel-title">
          <h4><%= link_to "#{@study.name} Clusters <span class='fa fa-chevron-down toggle-glyph'></span>".html_safe, '#plots', 'data-toggle' => 'collapse' %></h4>
        </div>
      </div>
      <div id="plots" class="panel-collapse collapse in">
        <div class="panel-body">
          <div class="col-md-12">
            <div class="row">
              <div class="col-xs-12">
                <div id="colorscale-target"></div>
                <div id="toggle-plots"></div>
                <div>
                  <%= render partial: 'scattergl_toggle' %>
                </div>
              </div>
            </div>
            <div class="row">
              <div id="cluster-plot"></div>
              <div id="cluster-figure-legend"></div>
            </div>
            <div class="row">
              <div class="well" id="table-well">
                <table id="selected-table" class="table table-striped">
                  <thead>
                    <tr>
                      <th>Cell Name</th>
                      <th>Cluster</th>
                    </tr>
                  </thead>
                  <tfoot>
                    <tr>
                      <th>Cell Name</th>
                      <th>Cluster</th>
                    <tr>
                  </tfoot>
                  <tbody>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">

    $('#cluster-plot').data('rendered', false);

    var baseCamera = {
        "up":{"x":0,"y":0,"z":1},
        "center":{"x":0,"y":0,"z":0},
        "eye":{"x":1.25,"y":1.25,"z":1.25}
    };

    function renderScatter() {
        var url = '<%= render_cluster_path(study_name: @study.url_safe_name) %>';
        var target = $('#cluster-plot')[0];
        var spinner = new Spinner(opts).spin(target);
        $('#cluster-plot').data('spinner', spinner);
        var cluster = $('#cluster').val();
        var annotation = $('#annotation').val();
        var subsample = $('#subsample').val();
        url += '?cluster=' + cluster + '&annotation=' + annotation + '&subsample=' + subsample;

        $.ajax({
            url: url,
            method: 'GET',
            dataType: 'script'
        });
    }

    $(document).ready(function() {
        $('#cluster-plot').data('camera', baseCamera);
        // set default subsample option of 10K or all cells
        if (<%= @cluster.points > 10000 %>) {
            $('#subsample').val(10000);
            $('#search_subsample').val(10000);
        }

        renderScatter();
    });
    var target = $('#cluster-plot')[0];

    //hide table on load
    $('#table-well').css('visibility', 'hidden');

    //toggle scattergl / scatter for selection
    $("#toggle-scatter").click(function() {
      //var target = $('#cluster-plot')[0];
      $(target).on('plotly_afterplot', function() {
          if($(target).data('spinner') !== undefined){
              $(target).off('plotly_afterplot');
              $(target).data('spinner').stop();


              if(newType === 'scatter'){
                  $('#selected-table').DataTable();
                  $('#table-well').css('visibility', 'visible');
                  console.log('show');
              }
              else{
                  $('#selected-table').destroy();
                  $('#table-well').css('visibility', 'hidden');
                  console.log('hide');
              }
              
              console.log('stopped');
          }
      });
      //launch spinner
      var spinner = new Spinner(opts).spin(target);
      $(target).data('spinner', spinner);
      console.log('started');
      var newType = data[0].type === 'scattergl' ? 'scatter' : 'scattergl';

      data[0].type = newType;
      console.log('Changed scatter to: ' + newType);
      // re-render reference plot if showing numeric annotations
      for(var i = 0; i < data.length; i ++){
          data[i].type = newType;
      }
      Plotly.newPlot('cluster-plot', data, layout);

      console.log('attaching');
      console.log($('#cluster-plot')[0]);
      $('#cluster-plot')[0].on('plotly_selected', function(eventData) {
          var names = [];
          var annotations = [];

          var colors = [];

          eventData.points.forEach(function (pt) {
              names.push(data[pt.curveNumber].cells[pt.pointNumber]);
              annotations.push(data[pt.curveNumber].annotations[pt.pointNumber]);
          });
          console.log('Selected');
          console.log(names);
          console.log(annotations);

          var t = $('#selected-table').DataTable();

          for(var g = 0; g < names.length; g++){
                  t.rows("tr:contains('" + names[g] + "'):contains('" + annotations[g] + "')").remove();
          }
          for(var i = 0; i < names.length; i++){
              t.row.add( [
                  names[i],
                  annotations[i]
              ] ).draw( false );
          }

      });



    });

        // listener for cluster nav, specific to study page
    $("#annotation").change(function() {
        $('#cluster-plot').data('rendered', false);
        var an = $(this).val();
        // keep track for search purposes
        $('#search_annotation').val(an);
        $('#gene_set_annotation').val(an);
        renderScatter();
    });

    $('#subsample').change(function() {
        $('#cluster-plot').data('rendered', false);
        var sample = $(this).val();
        $('#search_subsample').val(sample);
        $('#gene_set_subsample').val(sample);
        renderScatter();
    });

    $("#cluster").change(function() {
        $('#cluster-plot').data('rendered', false);
        var newCluster = $(this).val();
        // keep track for search purposes
        $('#search_cluster').val(newCluster);
        $('#gene_set_cluster').val(newCluster);
        // grab currently selected annotation
        var currAnnot = $('#annotation').val();
        // get new annotation options and re-render
        $.ajax({
            url: "<%= get_new_annotations_path(study_name: @study.url_safe_name)%>?cluster=" + newCluster,
            method: 'GET',
            dataType: 'script',
            success: function (data) {
                // parse response as a string and see if currently selected annotation exists in new annotations
                if (data.indexOf(currAnnot) >= 0) {
                    $('#annotation').val(currAnnot);
                }
                $(document).ready(function () {
                    // since we now have new annotations, we need to set them in the search form for persistence
                    var an = $('#annotation').val();
                    $('#search_annotation').val(an);
                    $('#gene_set_annotation').val(an);
                    renderScatter();
                });
            }
        });
    });

</script>