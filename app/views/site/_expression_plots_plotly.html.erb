// load expression scatter plot
var exp = {
  x: <%= raw @expression[:all][:x] %>,
  y: <%= raw @expression[:all][:y] %>,
  <% if @cluster.is_3d? %>
    z: <%= raw @expression[:all][:z] %>,
  <% end %>
  text: <%= raw @expression[:all][:text] %>,
  mode: 'markers',
  type: '<%= @cluster.is_3d? ? 'scatter3d' : 'scattergl' %>',
  hoverinfo: 'text',
  marker: <%= raw @expression[:all][:marker].to_json %>
};

var clusterData = [exp];

<%= render partial: 'expression_scatter_layout' %>

Plotly.newPlot('scatter-plot', clusterData, scatterLayout);

// load static cluster scatter for reference
var data = [];
<% if @cluster.is_3d? %>
  <% @coordinates.each_key.sort.each_with_index do |key, index| %>
    var cluster_<%= index %>_clst = {
      x: <%= raw @coordinates[key][:x] %>,
      y: <%= raw @coordinates[key][:y] %>,
      z: <%= raw @coordinates[key][:z] %>,
      text: <%= raw @coordinates[key][:text] %>,
      textposition: 'bottom right',
      name: "<%= @coordinates[key][:name] %>",
      mode: 'markers',
      type: 'scatter3d',
      marker: {
        color: colorBrewerSet[<%= index %>],
        size: <%= raw @coordinates[key][:marker_size] %>,
        line:{
          color: plotlyDefaultLineColor,
          width: 0.5
        }
      }
    };

    data.push(cluster_<%= index %>_clst);
  <% end %>
<% else %>
  <% @coordinates.each_key.sort.each_with_index do |key, index| %>
    var cluster_<%= index %>_clst = {
      x: <%= raw @coordinates[key][:x] %>,
      y: <%= raw @coordinates[key][:y] %>,
      text: <%= raw @coordinates[key][:text] %>,
      name: "<%= @coordinates[key][:name] %>",
      mode: 'markers',
      type: 'scattergl',
      marker: {
        color: colorBrewerSet[<%= index %>],
        size: <%= raw @coordinates[key][:marker_size] %>,
        line:{
          color: plotlyDefaultLineColor,
          width: 0.5
        }
      }
    };

    data.push(cluster_<%= index %>_clst);
  <% end %>
<% end %>


<%= render partial: 'static_scatter_layout' %>

Plotly.newPlot('reference-plot', data, staticLayout);

$('#cluster-figure-legend').html("<p class='text-center help-block'><%= escape_javascript(render text: @cluster.study_file.description) %></p>");

// listener to redraw expression scatter with new color profile
// will also redraw reference plot if needed
$("#colorscale").change(function() {

    <%= render partial: 'expression_scatter_layout' %>
	  var theme = $(this).val();
    clusterData[0].marker.colorscale = theme;
	  console.log("setting colorscale to " + theme);
	  Plotly.newPlot('scatter-plot', clusterData, scatterLayout);

    // re-render reference plot if showing numeric annotations
    if (<%= @selected_annotation[:type] == 'numeric' %>) {
        <%= render partial: 'static_scatter_layout' %>
        data[0].marker.colorscale = theme;
        Plotly.newPlot('reference-plot', data, staticLayout);
    }
});

<%= render partial: 'expression_scatter_camera' %>

// load box plot data
var expressionData = [];

<% if @values_box_type == 'Box Plot' %>
    <% @values.sort_by {|k,v| k}.each_with_index do |(cluster, data), index| %>
      var cluster_<%= index %>_exp = {
        y: <%= raw data[:y] %>,
        name: "<%= data[:name] %>",
        <% if params[:boxpoints].nil? %>
            boxpoints: 'all',
        <% elsif params[:boxpoints].blank? %>
            boxpoints: false,
        <% else %>
            boxpoints: "<%= params[:boxpoints] %>",
        <% end %>
        boxmean: true,
        type: 'box',
        marker: {
          color: colorBrewerSet[<%= index %>],
          line:{
            color: plotlyDefaultLineColor,
            width: 0.5
          }
        }
      };

        expressionData.push(cluster_<%= index %>_exp);
    <% end %>

    <%= render partial: 'expression_box_layout' %>
    <% else %>
    var formatted_array = [];
    var ker = "<%= @values_kernel_type%>";
    <% @values.sort_by {|k,v| k}.each_with_index do |(cluster, data), index| %>
      var name = "<%= data[:name] %>";
      var data = <%= raw data[:y] %>;
      var master_array = [name, data, ker]
      formatted_array.push(master_array);
    <% end %>
      var title = "<%= params[:cluster]%>";
      var data = createTracesAndLayout(formatted_array, title);
      expressionData = [].concat.apply([], data[0] );
      expressionLayout = data[1];
<% end%>
Plotly.newPlot('box-plot', expressionData, expressionLayout);
