// load expression scatter plot
var exp = {
  x: <%= raw @expression[:all][:x] %>,
  y: <%= raw @expression[:all][:y] %>,
  cells: <%= raw @expression[:all][:cells] %>,
  annotations: <%= raw @expression[:all][:annotations] %>,
  <% if @cluster.is_3d? %>
    z: <%= raw @expression[:all][:z] %>,
  <% end %>
  text: <%= raw @expression[:all][:text] %>,
  mode: 'markers',
  type: '<%= @cluster.is_3d? ? 'scatter3d' : 'scattergl' %>',
  hoverinfo: 'text',
  marker: <%= raw @expression[:all][:marker].to_json %>
};

var clusterData = [exp];

<%= render partial: 'expression_scatter_layout' %>

Plotly.newPlot('scatter-plot', clusterData, scatterLayout);

// load static cluster scatter for reference
var dataRef = [];
<% if @cluster.is_3d? %>
  <% @coordinates.each_key.sort.each_with_index do |key, index| %>
    var cluster_<%= index %>_clst = {
      x: <%= raw @coordinates[key][:x] %>,
      y: <%= raw @coordinates[key][:y] %>,
      z: <%= raw @coordinates[key][:z] %>,
      text: <%= raw @coordinates[key][:text] %>,
      textposition: 'bottom right',
      name: "<%= @coordinates[key][:name] %>",
      mode: 'markers',
      type: 'scatter3d',
      marker: {
        color: colorBrewerSet[<%= index %>],
        size: <%= raw @coordinates[key][:marker_size] %>,
        line:{
          color: plotlyDefaultLineColor,
          width: 0.5
        }
      }
    };

    dataRef.push(cluster_<%= index %>_clst);
  <% end %>
<% else %>

  <% @coordinates.each_key.sort.each_with_index do |key, index| %>
    var cluster_<%= index %>_clst = {
      x: <%= raw @coordinates[key][:x] %>,
      y: <%= raw @coordinates[key][:y] %>,
      cells: <%= raw @coordinates[key][:cells] %>,
      annotations: <%= raw @coordinates[key][:annotations] %>,
      text: <%= raw @coordinates[key][:text] %>,
      name: "<%= @coordinates[key][:name] %>",
      mode: 'markers',
      dragmode: 'lasso, select',
      type: 'scattergl',
      marker: {
        color: colorBrewerSet[<%= index %>],
        size: <%= raw @coordinates[key][:marker_size] %>,
        line:{
          color: plotlyDefaultLineColor,
          width: 0.5
        }
      }
    };

    dataRef.push(cluster_<%= index %>_clst);
  <% end %>
    $("#toggle-scatter").click(function() {
      var target = $('#scatter-plot')[0];
      $(target).on('plotly_afterplot', function() {
        if($(target).data('spinner') !== undefined){
          $(target).off('plotly_afterplot');
          $(target).data('spinner').stop();
          console.log('stopped');
        }
      });
      //launch spinner
      var spinner = new Spinner(opts).spin(target);
      $(target).data('spinner', spinner);
      console.log('started');

      var new_type = clusterData[0].type === 'scattergl' ? 'scatter' : 'scattergl';
      clusterData[0].type = new_type;
      Plotly.newPlot('scatter-plot', clusterData, scatterLayout);

      $('#scatter-plot')[0].on('plotly_selected', function(eventData) {
          var names = [];
          var annotations = [];

          var colors = [];
          console.log(eventData);
          eventData.points.forEach(function (pt) {
              names.push(clusterData[pt.curveNumber].cells[pt.pointNumber]);
              annotations.push(clusterData[pt.curveNumber].annotations[pt.pointNumber]);
          });

          console.log('Selected');
          console.log(names);
          console.log(annotations);
      });




      console.log('Changed scatter to: ' + new_type);
      // re-render reference plot if showing numeric annotations
      /*
      for(var i = 0; i < dataRef.length; i ++){
        dataRef[i].type = new_type;
      }
      Plotly.newPlot('reference-plot', dataRef, staticLayout);
      */

    });
<% end %>


<%= render partial: 'static_scatter_layout' %>

Plotly.newPlot('reference-plot', dataRef, staticLayout);

$('#cluster-figure-legend').html("<p class='text-center help-block'><%= escape_javascript(render text: @cluster.study_file.description) %></p>");

// listener to redraw expression scatter with new color profile
// will also redraw reference plot if needed
$("#colorscale").change(function() {

    <%= render partial: 'expression_scatter_layout' %>
	  var theme = $(this).val();
    clusterData[0].marker.colorscale = theme;
	  console.log("setting colorscale to " + theme);
	  Plotly.newPlot('scatter-plot', clusterData, scatterLayout);

    // re-render reference plot if showing numeric annotations
    if (<%= @selected_annotation[:type] == 'numeric' %>) {
        <%= render partial: 'static_scatter_layout' %>
        dataRef[0].marker.colorscale = theme;
        Plotly.newPlot('reference-plot', dataRef, staticLayout);
    }
});

<%= render partial: 'expression_scatter_camera' %>

// load box plot data
var expressionData = [];

<% if @values_box_type == 'box' %>
    <% @values.sort_by {|k,v| k}.each_with_index do |(cluster, data), index| %>
      var cluster_<%= index %>_exp = {
        y: <%= raw data[:y] %>,
        name: "<%= data[:name] %>",
        <% if params[:boxpoints].nil? %>
            boxpoints: 'all',
        <% elsif params[:boxpoints].blank? %>
            boxpoints: false,
        <% else %>
            boxpoints: "<%= params[:boxpoints] %>",
        <% end %>
        boxmean: true,
        type: 'box',
        marker: {
          color: colorBrewerSet[<%= index %>],
          line:{
            color: plotlyDefaultLineColor,
            width: 0.5
          }
        }
      };

        expressionData.push(cluster_<%= index %>_exp);
    <% end %>

    <%= render partial: 'expression_box_layout' %>
<% else %>
    var formatted_array = [];
    var ker = "<%= @values_kernel_type%>";
    var band = "<%= @values_band_type%>";
    <% @values.sort_by {|k,v| k}.each_with_index do |(cluster, data), index| %>
      var name = "<%= data[:name] %>";
      var data = <%= raw data[:y] %>;
      var master_array = [name, data, ker, band]
      formatted_array.push(master_array);
    <% end %>
    var title = "<%= params[:cluster]%>";
    var data = createTracesAndLayout(formatted_array, title);
    expressionData = [].concat.apply([], data[0] );
    expressionLayout = data[1];
<% end%>
Plotly.newPlot('box-plot', expressionData, expressionLayout);
